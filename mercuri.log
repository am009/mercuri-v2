[TRACE] Args: { inFile='test/spec/003-return-expr.c', outFile='/root/run/testcase.s', outType='ASM'}
[TRACE] --- dst ---
[TRACE] {
  "file": "test/spec/003-return-expr.c",
  "decls": [],
  "funcs": [
    {
      "retType": "INT",
      "id": "main",
      "params": [],
      "body": {
        "statements": [
          {
            "retval": {
              "left": {
                "value": {
                  "basicType": "INT",
                  "intValue": 1
                },
                "isConst": true
              },
              "right": {
                "left": {
                  "value": {
                    "basicType": "INT",
                    "intValue": 2
                  },
                  "isConst": true
                },
                "right": {
                  "value": {
                    "basicType": "INT",
                    "intValue": 3
                  },
                  "isConst": true
                },
                "op": "MUL",
                "isConst": false
              },
              "op": "ADD",
              "isConst": false
            }
          }
        ]
      }
    }
  ]
}
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] --- ssa ---
[TRACE] source_filename = "test/spec/003-return-expr.c"

declare i32 @getint()
declare i32 @getch()
declare float @getfloat()
declare i32 @getarray(i32)
declare i32 @getfarray(float)
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32, i32)
declare void @putfarray(i32, float)
declare void @putf(i8*, ...)


define i32 @main(){
entry:
  %0 = mul i32 2, 3
  %1 = add i32 1, %0
  ret i32 0

}
