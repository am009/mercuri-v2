[TRACE] Args: { inFile='test/spec/004-const-decl.c', outFile='/root/run/testcase.s', outType='ASM'}
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] enter scope
[TRACE] leave scope
[TRACE] --- ssa ---
[TRACE] source_filename = "test/spec/004-const-decl.c"

declare i32 @getint()
declare i32 @getch()
declare float @getfloat()
declare i32 @getarray(i32*)
declare i32 @getfarray(float*)
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32, i32*)
declare void @putfarray(i32, float*)
declare void @putf(i8*, ...)


define i32 @main(){
entry:
  %a_0 = alloca i32 
  %b_1 = alloca i32 
  store i32 10, i32* %a_0
  %0 = sub i32 0, 1
  store i32 %0, i32* %b_1
  %1 = load i32, i32* %a_0
  %2 = load i32, i32* %b_1
  %3 = add i32 %1, %2
  ret i32 %3

}


[TRACE] --- asm ---
[TRACE] .macro MOV32 reg, target
	MOVW \reg, #:lower16:\target
	MOVT \reg, #:upper16:\target
.endm

.text
.syntax unified
.file 1 "test/spec/004-const-decl.c"

.global	main
	.type	main, %function
	.p2align	2
	.code	32
main_entry:
	backend.arm.inst.Prologue@4411d970
	SUB	vreg0, fp, #0x4
	SUB	vreg1, fp, #0x8
	MOVW	ip, #0xa
	STORE	ip, vreg0
	MOVW	ip, #0x0
	MOVW	vreg3, #0x1
	SUB	vreg2, ip, vreg3
	STORE	vreg2, vreg1
	LOAD	vreg4, vreg0
	LOAD	vreg5, vreg1
	ADD	vreg6, vreg4, vreg5
	backend.arm.inst.RetInst@6442b0a6

